package Day14;

public class Day14_1_클래스 { // c s

	public static void main(String[] args) { // m s
		
		// 클래스
			// 클래스 사용하는 이유
			// 1. 여러개의 (서로 다른 자료형)변수[메모리] 묶음 관리
			// 2. 클래스(설계도) 기반으로 많은 (서로 다른)객체를 생성
				// * 주차관리 설계
					// 차량번호, 입차시간, 출차시간, 금액
				// * 차량 객체
					// 변수4개 * 차량수 	vs  차량수*객체수 [관리 편함]
			// 3. API(라이브러리) : 누군가가 미리 만들어놓은 클래스
				// * String 클래스
				// * Scanner 클래스
				// 만들어진 클래스를 이용한 빠른 개발 가능
			// 4. 1.필드[메모리] 2.생성자[객체생성시초기값] 3.메소드
				// 필드 : 변수, 인터페이스, 객체, 배열 등
				// 생성자 : 선택
					// 붕어빵틀[클래스]
						// 필드 : 내용물[팥,슈크림]
		
					// 붕어빵틀[클래스] -> 빈생성자		-> 객체 [내용물 없는 붕어빵] -> 추후에 내용물 추가
						
					// 붕어빵틀[클래스] -> [모든필드받는]풀생성자	-> 객체[내용물 있는 붕어빵]
				// 메소드 : 코드 묶음처리
		
		// 예1) 회원
			// 회원가입 할때 필요한 기록[메모리]
		// * 객체화가 아닐경우 변수
			// 1. 회원이 생성될때마다 변수의 수 = 회원수 x 변수 -> 변수가 많아서 관리가 힘들다
			// 2. 변수가 동일하면 배열을 사용가능 / 하지만 서로 다른 변수간 배열 x
			
			// 회원 1
			String id = "qweqwe";
			String password = "qweqwe";
			String name = "qweqwe";
			int point = 10;
		
			// 회원 2
			String id2 = "asdasd";
			String password2 = "asdasd";
			String name2 = "asdasd";
			int point2 = 10;
		
		
		// * 객체화
			// 회원1
			회원 회원1 = new 회원();
			회원1.id = "qweqwe";
			회원1.password = "qweqwe";
			회원1.name = "qweqwe";
			회원1.point = 10;
			// 회원2
			회원 회원2 = new 회원();
			회원1.id = "asdasd";
			회원1.password = "asdasd";
			회원1.name = "asdasd";
			회원1.point = 10;
					
		
		
		
		
		
	} // m e
	
	
	
	
} // c e
